# =============================================================================
# KBNT Enhanced Kafka Publication Logging System
# Spring Boot Application Configuration for Complete Environment
# =============================================================================

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:/}
  shutdown: graceful
  
spring:
  application:
    name: ${APPLICATION_NAME:kbnt-enhanced-kafka-system}
  
  # Profile Configuration
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:production}
    
  # Database Configuration (PostgreSQL)
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:kbnt_consumption_db}
    username: ${POSTGRES_USER:kbnt_user}
    password: ${POSTGRES_PASSWORD:kbnt_password_2024}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_POOL_MIN:5}
      pool-name: KBNTConnectionPool
      
  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        generate_statistics: ${HIBERNATE_STATS:false}
        
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    
    # Producer Configuration
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      enable-idempotence: true
      properties:
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        max.in.flight.requests.per.connection: 5
        retry.backoff.ms: 1000
        
    # Consumer Configuration  
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: ${KAFKA_CONSUMER_GROUP:kbnt-stock-consumer-group}
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 500
      fetch-min-size: 1
      fetch-max-wait: 500
      properties:
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        session.timeout.ms: 30000
        heartbeat.interval.ms: 3000
        max.poll.interval.ms: 300000
        spring.json.trusted.packages: "com.estudoskbnt.*"
        
    # Listener Configuration
    listener:
      ack-mode: manual_immediate
      concurrency: ${KAFKA_LISTENER_CONCURRENCY:3}
      poll-timeout: 3000
      
  # Task Execution Configuration
  task:
    execution:
      pool:
        core-size: ${TASK_CORE_SIZE:8}
        max-size: ${TASK_MAX_SIZE:16}
        queue-capacity: ${TASK_QUEUE_SIZE:100}
        
# Logging Configuration
logging:
  level:
    root: ${LOG_LEVEL_ROOT:WARN}
    com.estudoskbnt: ${LOG_LEVEL_APP:INFO}
    org.springframework.kafka: ${LOG_LEVEL_KAFKA:INFO}
    org.apache.kafka: ${LOG_LEVEL_KAFKA_CLIENT:WARN}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
    org.springframework.web: ${LOG_LEVEL_WEB:INFO}
    
  pattern:
    console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr([%X{correlationId:-}]){yellow} %clr([%t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{40} - %msg%n"
    
  file:
    name: ${LOG_FILE_PATH:logs/${spring.application.name}.log}
    max-size: ${LOG_FILE_MAX_SIZE:100MB}
    max-history: ${LOG_FILE_MAX_HISTORY:30}
    total-size-cap: ${LOG_FILE_TOTAL_CAP:1GB}

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
      base-path: /actuator
  endpoint:
    health:
      show-details: ${HEALTH_SHOW_DETAILS:when_authorized}
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: ${PROMETHEUS_ENABLED:true}
  metrics:
    export:
      prometheus:
        enabled: ${PROMETHEUS_ENABLED:true}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.75, 0.95, 0.99
        
# Application Specific Configuration
kbnt:
  kafka:
    # Topic Configuration
    topics:
      stock-updates:
        name: ${KAFKA_TOPIC_STOCK_UPDATES:stock-updates}
        partitions: ${KAFKA_TOPIC_PARTITIONS:3}
        replicas: ${KAFKA_TOPIC_REPLICAS:3}
      high-priority-stock-updates:
        name: ${KAFKA_TOPIC_HIGH_PRIORITY:high-priority-stock-updates}
        partitions: ${KAFKA_TOPIC_PARTITIONS:3}
        replicas: ${KAFKA_TOPIC_REPLICAS:3}
      stock-updates-retry:
        name: ${KAFKA_TOPIC_RETRY:stock-updates-retry}
        partitions: ${KAFKA_TOPIC_PARTITIONS:3}
        replicas: ${KAFKA_TOPIC_REPLICAS:3}
      stock-updates-dlt:
        name: ${KAFKA_TOPIC_DLT:stock-updates-dlt}
        partitions: ${KAFKA_TOPIC_DLT_PARTITIONS:1}
        replicas: ${KAFKA_TOPIC_REPLICAS:3}
      publication-logs:
        name: ${KAFKA_TOPIC_PUBLICATION_LOGS:publication-logs}
        partitions: ${KAFKA_TOPIC_PARTITIONS:3}
        replicas: ${KAFKA_TOPIC_REPLICAS:3}
        
    # Message Configuration
    message:
      hash-algorithm: ${HASH_ALGORITHM:SHA-256}
      include-timestamp: ${INCLUDE_TIMESTAMP:true}
      correlation-id-header: ${CORRELATION_ID_HEADER:X-Correlation-ID}
      
    # Producer Configuration
    producer:
      enable-hash-generation: ${ENABLE_HASH_GENERATION:true}
      enable-publication-logs: ${ENABLE_PUBLICATION_LOGS:true}
      enable-performance-metrics: ${ENABLE_PERFORMANCE_METRICS:true}
      
    # Consumer Configuration
    consumer:
      enable-retry: ${ENABLE_RETRY:true}
      max-retry-attempts: ${MAX_RETRY_ATTEMPTS:3}
      retry-delay-ms: ${RETRY_DELAY_MS:1000}
      enable-dead-letter: ${ENABLE_DEAD_LETTER:true}
      
  # External API Configuration
  external-api:
    enabled: ${EXTERNAL_API_ENABLED:false}
    base-url: ${EXTERNAL_API_URL:https://httpbin.org}
    timeout: ${EXTERNAL_API_TIMEOUT:5000}
    max-retries: ${EXTERNAL_API_MAX_RETRIES:3}
    retry-delay: ${EXTERNAL_API_RETRY_DELAY:1000}
    
  # Monitoring Configuration
  monitoring:
    enabled: ${MONITORING_ENABLED:true}
    performance-tracking: ${PERFORMANCE_TRACKING:true}
    detailed-metrics: ${DETAILED_METRICS:true}
    
  # Security Configuration
  security:
    enable-correlation-id: ${ENABLE_CORRELATION_ID:true}
    mask-sensitive-data: ${MASK_SENSITIVE_DATA:true}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
      
  # Development Database (H2 for testing)
  h2:
    console:
      enabled: true
      path: /h2-console
      
  jpa:
    show-sql: true
    properties:
      hibernate:
        generate_statistics: true
        
logging:
  level:
    com.estudoskbnt: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    
kbnt:
  external-api:
    enabled: false
  monitoring:
    detailed-metrics: true

---
# Testing Profile
spring:
  config:
    activate:
      on-profile: testing
      
  # Test Database Configuration
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    
  jpa:
    hibernate:
      ddl-auto: create-drop
      
  kafka:
    # Embedded Kafka for testing
    consumer:
      properties:
        spring.json.trusted.packages: "*"
        
logging:
  level:
    com.estudoskbnt: DEBUG
    org.springframework.kafka: DEBUG
    
management:
  endpoints:
    web:
      exposure:
        include: "*"

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
      
  jpa:
    show-sql: false
    properties:
      hibernate:
        generate_statistics: false
        
logging:
  level:
    root: WARN
    com.estudoskbnt: INFO
    
  file:
    name: /var/log/kbnt/${spring.application.name}.log
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: never
      
kbnt:
  external-api:
    enabled: true
  monitoring:
    detailed-metrics: false

---
# Kubernetes Profile
spring:
  config:
    activate:
      on-profile: kubernetes
      
  # Kubernetes-specific configurations
  datasource:
    url: jdbc:postgresql://kbnt-postgresql:5432/kbnt_consumption_db
    
  kafka:
    bootstrap-servers: kbnt-kafka-cluster-kafka-bootstrap:9092
    
logging:
  file:
    name: /tmp/logs/${spring.application.name}.log
    
management:
  server:
    port: 8081
  endpoints:
    web:
      base-path: /actuator
      
# Kubernetes Health Checks
  health:
    probes:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

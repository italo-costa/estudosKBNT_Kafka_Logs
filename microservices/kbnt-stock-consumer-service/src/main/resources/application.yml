# KBNT Stock Consumer Service Configuration
# Microservice B - Consumer Configuration for Red Hat AMQ Streams

# Spring Boot Configuration
spring:
  application:
    name: kbnt-stock-consumer-service
  
  # Database Configuration
  datasource:
    url: jdbc:h2:mem:consumptiondb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        generate_statistics: true
  
  # H2 Console (for development)
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # Jackson JSON Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    time-zone: UTC
    date-format: yyyy-MM-dd HH:mm:ss.SSS

# Server Configuration
server:
  port: 8081
  servlet:
    context-path: /api/consumer

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,kafka
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${app.environment:development}

# Application Specific Configuration
app:
  environment: development
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    
    # Consumer Configuration
    consumer:
      group-id: kbnt-stock-consumer-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 100
      session-timeout-ms: 30000
      heartbeat-interval-ms: 3000
      max-poll-interval-ms: 300000
      concurrency: 3
      
      # Retry Configuration
      retry:
        max-attempts: 3
        backoff-delay: 1000
        backoff-multiplier: 2.0
    
    # Topics Configuration
    topics:
      stock-updates: stock-updates
      high-priority-stock-updates: high-priority-stock-updates
      stock-updates-retry: stock-updates-retry
      stock-updates-dlt: stock-updates-dlt
    
    # Security Configuration (for Red Hat AMQ Streams)
    security:
      protocol: PLAINTEXT
      ssl:
        trust-store-location: 
        trust-store-password: 
      sasl:
        mechanism: 
        jaas-config: 
  
  # External API Configuration
  external-api:
    stock-service:
      base-url: http://localhost:8080
      timeout: 10
      max-retries: 3
      retry-delay: 2
    
    # Circuit Breaker Configuration
    circuit-breaker:
      enabled: true
      failure-rate-threshold: 50
      wait-duration-in-open-state: 30000
      sliding-window-size: 10
  
  # Processing Configuration
  processing:
    async:
      enabled: true
      core-pool-size: 5
      max-pool-size: 20
      queue-capacity: 100
    
    # Message validation
    validation:
      hash-verification: true
      duplicate-check: true
      expiration-check: true
    
    # Notification settings
    notifications:
      enabled: true
      async: true
  
  # Database Cleanup Configuration
  cleanup:
    enabled: true
    retention-days: 30
    schedule: "0 2 * * *" # Daily at 2 AM

# Logging Configuration
logging:
  level:
    com.estudoskbnt.consumer: DEBUG
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
  
  file:
    name: logs/kbnt-stock-consumer-service.log
    max-size: 50MB
    max-history: 10

---
# Production Profile
spring:
  profiles: production
  
  # Production Database (PostgreSQL)
  datasource:
    url: jdbc:postgresql://localhost:5432/kbnt_consumption_db
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:kbnt_user}
    password: ${DB_PASSWORD:kbnt_password}
    
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        generate_statistics: false

app:
  environment: production
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:amq-streams-kafka-bootstrap:9092}
    
    consumer:
      max-poll-records: 500
      concurrency: 5
    
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
      ssl:
        trust-store-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:/opt/kafka/ssl/truststore.jks}
        trust-store-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      sasl:
        mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
        jaas-config: ${KAFKA_SASL_JAAS_CONFIG}
  
  external-api:
    stock-service:
      base-url: ${STOCK_SERVICE_URL:http://stock-service:8080}

# Logging for production
logging:
  level:
    com.estudoskbnt.consumer: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN

---
# Test Profile
spring:
  profiles: test
  
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

app:
  kafka:
    bootstrap-servers: localhost:29092 # Testcontainers port
    
  external-api:
    stock-service:
      base-url: http://localhost:8080

logging:
  level:
    com.estudoskbnt.consumer: DEBUG
    org.springframework.test: DEBUG

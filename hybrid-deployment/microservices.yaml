apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-producer-service
  namespace: microservices
  labels:
    app: log-producer-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: log-producer-service
  template:
    metadata:
      labels:
        app: log-producer-service
    spec:
      containers:
      - name: log-producer-service
        image: log-producer-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        # Spring Boot Profile
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        
        # Kafka Configuration (Externa - AMQ Streams)
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: bootstrap-servers
        - name: SPRING_KAFKA_SECURITY_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: security-protocol
        - name: SPRING_KAFKA_SASL_MECHANISM
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: sasl-mechanism
        - name: SPRING_KAFKA_SASL_JAAS_CONFIG
          value: 'org.apache.kafka.common.security.scram.ScramLoginModule required username="$(KAFKA_USERNAME)" password="$(KAFKA_PASSWORD)";'
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: kafka-external-credentials
              key: kafka-username
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-external-credentials
              key: kafka-password
        
        # Performance Tuning
        - name: SPRING_KAFKA_PRODUCER_REQUEST_TIMEOUT_MS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: request-timeout-ms
        - name: SPRING_KAFKA_PRODUCER_DELIVERY_TIMEOUT_MS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: delivery-timeout-ms
        - name: SPRING_KAFKA_PRODUCER_RETRY_BACKOFF_MS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: retry-backoff-ms
        
        # Topics Configuration
        - name: KAFKA_TOPICS_APPLICATION_LOGS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: topics-application-logs
        - name: KAFKA_TOPICS_ERROR_LOGS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: topics-error-logs
        - name: KAFKA_TOPICS_AUDIT_LOGS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: topics-audit-logs
        
        # SSL Configuration
        - name: SPRING_KAFKA_SSL_TRUSTSTORE_LOCATION
          value: "/app/certs/truststore.jks"
        - name: SPRING_KAFKA_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-external-credentials
              key: truststore-password
        
        # Health Check
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        volumeMounts:
        - name: kafka-certs
          mountPath: /app/certs
          readOnly: true
      
      volumes:
      - name: kafka-certs
        secret:
          secretName: kafka-external-credentials
          items:
          - key: truststore.jks
            path: truststore.jks

---
apiVersion: v1
kind: Service
metadata:
  name: log-producer-service
  namespace: microservices
  labels:
    app: log-producer-service
spec:
  selector:
    app: log-producer-service
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: log-producer-ingress
  namespace: microservices
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: producer.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: log-producer-service
            port:
              number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-consumer-service
  namespace: microservices
  labels:
    app: log-consumer-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-consumer-service
  template:
    metadata:
      labels:
        app: log-consumer-service
    spec:
      containers:
      - name: log-consumer-service
        image: log-consumer-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
          name: http
        env:
        # Spring Boot Profile
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        
        # Kafka Configuration (Externa - AMQ Streams)
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: bootstrap-servers
        - name: SPRING_KAFKA_SECURITY_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: security-protocol
        - name: SPRING_KAFKA_SASL_MECHANISM
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: sasl-mechanism
        - name: SPRING_KAFKA_SASL_JAAS_CONFIG
          value: 'org.apache.kafka.common.security.scram.ScramLoginModule required username="$(KAFKA_USERNAME)" password="$(KAFKA_PASSWORD)";'
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: kafka-external-credentials
              key: kafka-username
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-external-credentials
              key: kafka-password
        
        # Consumer Configuration
        - name: SPRING_KAFKA_CONSUMER_GROUP_ID
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: consumer-group
        - name: SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: auto-offset-reset
        - name: SPRING_KAFKA_CONSUMER_FETCH_MIN_SIZE
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: fetch-min-bytes
        - name: SPRING_KAFKA_CONSUMER_FETCH_MAX_WAIT
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: fetch-max-wait-ms
        - name: SPRING_KAFKA_CONSUMER_MAX_POLL_RECORDS
          valueFrom:
            configMapKeyRef:
              name: kafka-external-config
              key: max-poll-records
        
        # Database Configuration
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: database-url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        
        # SSL Configuration
        - name: SPRING_KAFKA_SSL_TRUSTSTORE_LOCATION
          value: "/app/certs/truststore.jks"
        - name: SPRING_KAFKA_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-external-credentials
              key: truststore-password
        
        # Health Check
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/ready
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        volumeMounts:
        - name: kafka-certs
          mountPath: /app/certs
          readOnly: true
      
      volumes:
      - name: kafka-certs
        secret:
          secretName: kafka-external-credentials
          items:
          - key: truststore.jks
            path: truststore.jks

---
apiVersion: v1
kind: Service
metadata:
  name: log-consumer-service
  namespace: microservices
  labels:
    app: log-consumer-service
spec:
  selector:
    app: log-consumer-service
  ports:
    - name: http
      port: 80
      targetPort: 8081
      protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-analytics-service
  namespace: microservices
  labels:
    app: log-analytics-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-analytics-service
  template:
    metadata:
      labels:
        app: log-analytics-service
    spec:
      containers:
      - name: log-analytics-service
        image: log-analytics-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
          name: http
        env:
        # Spring Boot Profile
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        
        # Database Configuration
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: database-url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        
        # Redis Configuration
        - name: SPRING_DATA_REDIS_HOST
          value: "redis-service"
        - name: SPRING_DATA_REDIS_PORT
          value: "6379"
        
        # Health Check
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/ready
            port: 8082
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: log-analytics-service
  namespace: microservices
  labels:
    app: log-analytics-service
spec:
  selector:
    app: log-analytics-service
  ports:
    - name: http
      port: 80
      targetPort: 8082
      protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: microservices
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP

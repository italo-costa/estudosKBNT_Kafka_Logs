version: '3.8'

# MAPEAMENTO PADRONIZADO DE PORTAS
# =====================================
# Infraestrutura:
#   - PostgreSQL: 5432:5432
#   - Redis: 6379:6379
#   - Zookeeper: 2181:2181
#   - Kafka: 9092:9092, 29092:29092
#
# Microserviços (Padrão: 80XX:8080 para app, 90XX:9090 para management):
#   - API Gateway: 8080:8080, 9080:9090
#   - Log Producer: 8081:8080, 9081:9090
#   - Log Consumer: 8082:8080, 9082:9090
#   - Log Analytics: 8083:8080, 9083:9090
#   - Virtual Stock: 8084:8080, 9084:9090
#   - KBNT Consumer: 8085:8080, 9085:9090
# =====================================

services:
  # Database for analytics service
  postgres:
    image: postgres:15-alpine
    container_name: postgres-logs
    environment:
      POSTGRES_DB: loganalytics
      POSTGRES_USER: loguser
      POSTGRES_PASSWORD: logpass123
    ports:
      - "5432:5432"  # PostgreSQL porta padrão
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loguser -d loganalytics"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis-logs
    ports:
      - "6379:6379"  # Redis porta padrão
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log Producer Service
  log-producer-service:
    build:
      context: ./log-producer-service
      dockerfile: Dockerfile
    container_name: log-producer-service
    ports:
      - "8081:8080"  # Aplicação na porta padrão 8080 interna
      - "9081:9090"  # Management/Actuator na porta padrão 9090 interna
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9090
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Log Consumer Service
  log-consumer-service:
    build:
      context: ./log-consumer-service
      dockerfile: Dockerfile
    container_name: log-consumer-service
    ports:
      - "8082:8080"  # Aplicação na porta padrão 8080 interna
      - "9082:9090"  # Management/Actuator na porta padrão 9090 interna
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DATABASE_URL=jdbc:postgresql://postgres:5432/loganalytics
      - DATABASE_USERNAME=loguser
      - DATABASE_PASSWORD=logpass123
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9090
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Log Analytics Service
  log-analytics-service:
    build:
      context: ./log-analytics-service
      dockerfile: Dockerfile
    container_name: log-analytics-service
    ports:
      - "8083:8080"  # Aplicação na porta padrão 8080 interna
      - "9083:9090"  # Management/Actuator na porta padrão 9090 interna
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://postgres:5432/loganalytics
      - DATABASE_USERNAME=loguser
      - DATABASE_PASSWORD=logpass123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"  # Aplicação na porta padrão 8080 (externa e interna iguais para gateway)
      - "9080:9090"  # Management/Actuator na porta padrão 9090 interna
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOG_PRODUCER_URL=http://log-producer-service:8080
      - LOG_ANALYTICS_URL=http://log-analytics-service:8080
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9090
    depends_on:
      - log-producer-service
      - log-analytics-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Virtual Stock Service
  virtual-stock-service:
    build:
      context: ./virtual-stock-service
      dockerfile: Dockerfile
    container_name: virtual-stock-service
    ports:
      - "8084:8080"  # Aplicação na porta padrão 8080 interna
      - "9084:9090"  # Management/Actuator na porta padrão 9090 interna
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9090
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # KBNT Stock Consumer Service
  kbnt-stock-consumer-service:
    build:
      context: ./kbnt-stock-consumer-service
      dockerfile: Dockerfile
    container_name: kbnt-stock-consumer-service
    ports:
      - "8085:8080"  # Aplicação na porta padrão 8080 interna
      - "9085:9090"  # Management/Actuator na porta padrão 9090 interna
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DATABASE_URL=jdbc:postgresql://postgres:5432/loganalytics
      - DATABASE_USERNAME=loguser
      - DATABASE_PASSWORD=logpass123
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9090
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kafka Message Broker
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"   # Kafka porta externa padrão
      - "29092:29092" # Kafka porta interna para containers
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    volumes:
      - kafka-data:/bitnami/kafka
    depends_on:
      - zookeeper

  # Zookeeper for Kafka coordination
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"  # Zookeeper porta padrão
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
      - zookeeper-logs:/logs

volumes:
  postgres-data:
  kafka-data:
  zookeeper-data:
  zookeeper-logs:

networks:
  default:
    name: kafka-microservices

# Script PowerShell para demonstrar o Workflow de Integra√ß√£o
# Simula o fluxo completo de uma mensagem JSON atrav√©s dos microservi√ßos

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("demo", "run", "test", "connectivity", "json")]
    [string]$Action = "demo"
)

# Configura√ß√µes
$ProducerUrl = "http://localhost:8081"
$ConsumerUrl = "http://localhost:8082"
$AnalyticsUrl = "http://localhost:8083"

# Fun√ß√µes de output colorido
function Write-Step {
    param([int]$StepNumber, [string]$Message)
    Write-Host "[STEP $StepNumber] $Message" -ForegroundColor Blue
}

function Write-Phase {
    param([string]$Message)
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host "$Message" -ForegroundColor Magenta
    Write-Host "========================================" -ForegroundColor Magenta
}

function Write-Log {
    param([string]$Message)
    Write-Host "[LOG] $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Gerar dados de exemplo
function Get-SamplePayload {
    $timestamp = [DateTime]::UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
    $requestId = "req-$(Get-Date -Format 'yyyyMMddHHmmss')-$((Get-Random -Maximum 1000))"
    
    $payload = @{
        service = "user-service"
        level = "INFO"
        message = "User authentication successful - workflow demo"
        timestamp = $timestamp
        host = "demo-server-01"
        environment = "demo"
        requestId = $requestId
        userId = "demo-user-123"
        httpMethod = "POST"
        endpoint = "/api/auth/login"
        statusCode = 200
        responseTimeMs = 150
        metadata = @{
            userAgent = "WorkflowDemo/1.0"
            clientIp = "127.0.0.1"
            testMode = $true
        }
    } | ConvertTo-Json -Depth 3
    
    return @{
        Payload = $payload
        RequestId = $requestId
        Timestamp = $timestamp
    }
}

# Fun√ß√£o para testar conectividade HTTP
function Test-ServiceConnectivity {
    param([string]$Url, [string]$ServiceName)
    
    try {
        $response = Invoke-WebRequest -Uri "$Url/actuator/health" -Method GET -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Success "‚úÖ $ServiceName ($Url) - Ativo"
            return $true
        }
    }
    catch {
        Write-Warning "‚ö†Ô∏è  $ServiceName ($Url) - N√£o acess√≠vel"
        return $false
    }
}

# Fun√ß√£o principal da demonstra√ß√£o
function Invoke-WorkflowDemo {
    Write-Host "üîÑ DEMONSTRA√á√ÉO DO WORKFLOW DE INTEGRA√á√ÉO" -ForegroundColor Green
    Write-Host "===============================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "Este script demonstra o fluxo completo de uma mensagem JSON:"
    Write-Host "HTTP ‚Üí Microservi√ßo A ‚Üí AMQ Streams ‚Üí Microservi√ßo B ‚Üí API Externa"
    Write-Host ""
    
    # Gerar payload de exemplo
    $sampleData = Get-SamplePayload
    $jsonPayload = $sampleData.Payload
    $requestId = $sampleData.RequestId
    $timestamp = $sampleData.Timestamp
    
    Write-Host "Payload de exemplo:"
    Write-Host $jsonPayload -ForegroundColor Gray
    Write-Host ""
    
    Read-Host "Pressione ENTER para iniciar a demonstra√ß√£o"
    
    # FASE 1: Microservi√ßo A - Recep√ß√£o HTTP
    Write-Phase "FASE 1: MICROSERVI√áO A - RECEP√á√ÉO HTTP"
    
    Write-Step 1.1 "Enviando mensagem JSON via HTTP para o Producer Service"
    Write-Log "POST $ProducerUrl/api/v1/logs"
    Write-Log "Content-Type: application/json"
    Write-Log "RequestId: $requestId"
    
    Write-Host ""
    Write-Host "üíª Simulando envio HTTP..." -ForegroundColor Yellow
    Start-Sleep -Seconds 1
    
    # Verificar se o Producer est√° rodando
    $producerActive = Test-ServiceConnectivity -Url $ProducerUrl -ServiceName "Producer Service"
    
    if ($producerActive) {
        try {
            # Enviar a mensagem real
            $response = Invoke-WebRequest -Uri "$ProducerUrl/api/v1/logs" -Method POST `
                -Body $jsonPayload -ContentType "application/json" -TimeoutSec 10 -UseBasicParsing
            
            if ($response.StatusCode -eq 202) {
                Write-Success "Mensagem aceita pelo Producer (HTTP 202)"
                Write-Host "Response: $($response.Content)" -ForegroundColor Gray
                
                Write-Log "‚úÖ [HTTP_RECEIVED] Service: user-service, Level: INFO, Message: User authentication successful"
                Write-Log "üìù [REQUEST_DETAILS] RequestId: $requestId, Host: demo-server-01"
            }
        }
        catch {
            Write-Error "Falha na comunica√ß√£o HTTP: $($_.Exception.Message)"
            Write-Log "‚úÖ [HTTP_RECEIVED] Service: user-service, Level: INFO (SIMULADO)"
        }
    }
    else {
        Write-Warning "Producer Service n√£o est√° rodando. Simulando resposta..."
        Write-Log "‚úÖ [HTTP_RECEIVED] Service: user-service, Level: INFO, Message: User authentication successful"
        Write-Log "üìù [REQUEST_DETAILS] RequestId: $requestId, Host: demo-server-01"
        Write-Success "Mensagem aceita pelo Producer (SIMULADO)"
    }
    
    Write-Step 1.2 "Microservi√ßo A processa e envia para AMQ Streams"
    Start-Sleep -Seconds 1
    Write-Log "üì§ [KAFKA_SEND] Topic: application-logs, Key: user-service, Service: user-service"
    Write-Log "üöÄ [KAFKA_SENDING] Topic: 'application-logs', Key: 'user-service', Message: 'User authentication successful'"
    Start-Sleep -Seconds 1
    Write-Log "‚úÖ [KAFKA_SUCCESS] Topic: 'application-logs', Partition: 1, Offset: 12345, Key: 'user-service'"
    Write-Log "üìÆ [HTTP_RESPONSE] Status: 202 Accepted, Service: user-service, Topic: application-logs"
    
    # FASE 2: AMQ Streams - Recep√ß√£o e Armazenamento
    Write-Phase "FASE 2: AMQ STREAMS - RECEP√á√ÉO E ARMAZENAMENTO"
    
    Write-Step 2.1 "AMQ Streams recebe e armazena a mensagem"
    Start-Sleep -Seconds 1
    Write-Log "üì• [BROKER_RECEIVED] Topic: application-logs, Partition: 1, Offset: 12345, Size: 856 bytes"
    Write-Log "‚úÖ [LOG_APPENDED] Topic: application-logs, Partition: 1, Offset: 12345, Segment: 00000000000012000.log"
    
    Write-Step 2.2 "Verifica√ß√£o do log no t√≥pico Kafka"
    Write-Success "Mensagem armazenada com sucesso no t√≥pico 'application-logs'"
    Write-Log "Topic: application-logs | Partitions: 3 | Replication Factor: 3"
    Write-Log "Key: user-service | Partition: 1 | Offset: 12345"
    
    # FASE 3: Microservi√ßo B - Consumo da Mensagem
    Write-Phase "FASE 3: MICROSERVI√áO B - CONSUMO DA MENSAGEM"
    
    Write-Step 3.1 "Microservi√ßo B consome mensagem do Kafka"
    Start-Sleep -Seconds 1
    Write-Log "üì• [KAFKA_CONSUMED] Topic: application-logs, Service: user-service, Level: INFO"
    Write-Log "üìù [MESSAGE_DETAILS] RequestId: $requestId, Message: 'User authentication successful', Timestamp: $timestamp"
    
    Write-Step 3.2 "Processamento e envio para API externa"
    Start-Sleep -Seconds 1
    Write-Log "üîÑ [API_MAPPING] Converting LogEntry to External API request"
    
    # Verificar se o Consumer est√° rodando
    $consumerActive = Test-ServiceConnectivity -Url $ConsumerUrl -ServiceName "Consumer Service"
    
    if ($consumerActive) {
        Write-Log "üåê [API_CALLING] Sending log data to external API: https://external-logs-api.company.com/v1/logs"
        Write-Log "‚úÖ [API_SUCCESS] External API responded with status: 200 OK, ResponseTime: 27ms"
        Write-Log "‚úÖ [API_SENT] RequestId: $requestId, Service: user-service, External API Response: SUCCESS"
    }
    else {
        Write-Warning "Consumer Service n√£o est√° rodando. Simulando processamento..."
        Write-Log "üåê [API_CALLING] Sending log data to external API: https://external-logs-api.company.com/v1/logs (SIMULADO)"
        Write-Log "‚úÖ [API_SUCCESS] External API responded with status: 200 OK (SIMULADO)"
        Write-Log "‚úÖ [API_SENT] RequestId: $requestId, Service: user-service, External API Response: SUCCESS (SIMULADO)"
    }
    
    # FASE 4: Analytics (Opcional)
    Write-Phase "FASE 4: ANALYTICS E M√âTRICAS (OPCIONAL)"
    
    Write-Step 4.1 "Analytics Service processa dados para dashboards"
    Start-Sleep -Seconds 1
    
    $analyticsActive = Test-ServiceConnectivity -Url $AnalyticsUrl -ServiceName "Analytics Service"
    
    if ($analyticsActive) {
        Write-Log "üìä [METRICS_UPDATE] Service: user-service, Level: INFO, Count: +1"
        Write-Log "üîç [ANALYTICS_READY] Data available for dashboards and queries"
    }
    else {
        Write-Warning "Analytics Service n√£o est√° rodando. Simulando analytics..."
        Write-Log "üìä [METRICS_UPDATE] Service: user-service, Level: INFO, Count: +1 (SIMULADO)"
        Write-Log "üîç [ANALYTICS_READY] Data available for dashboards and queries (SIMULADO)"
    }
    
    # Resumo Final
    Write-Phase "üéØ RESUMO DO WORKFLOW EXECUTADO"
    
    Write-Host ""
    Write-Host "| Fase | Componente | A√ß√£o | Status |" -ForegroundColor White
    Write-Host "|------|------------|------|--------|" -ForegroundColor White
    Write-Host "| 1.1  | Microservi√ßo A | Recebe HTTP | ‚úÖ Conclu√≠do |" -ForegroundColor White
    Write-Host "| 1.2  | Microservi√ßo A | Publica Kafka | ‚úÖ Conclu√≠do |" -ForegroundColor White
    Write-Host "| 2.1  | AMQ Streams | Armazena | ‚úÖ Conclu√≠do |" -ForegroundColor White
    Write-Host "| 3.1  | Microservi√ßo B | Consome | ‚úÖ Conclu√≠do |" -ForegroundColor White
    Write-Host "| 3.2  | Microservi√ßo B | API Externa | ‚úÖ Conclu√≠do |" -ForegroundColor White
    Write-Host "| 4.1  | Analytics | M√©tricas | ‚úÖ Conclu√≠do |" -ForegroundColor White
    Write-Host ""
    
    Write-Success "üéâ Workflow de Integra√ß√£o executado com sucesso!"
    Write-Host ""
    Write-Host "Dados da mensagem processada:" -ForegroundColor White
    Write-Host "- RequestId: $requestId" -ForegroundColor Gray
    Write-Host "- Service: user-service" -ForegroundColor Gray
    Write-Host "- Level: INFO" -ForegroundColor Gray
    Write-Host "- Timestamp: $timestamp" -ForegroundColor Gray
    Write-Host "- Topic: application-logs" -ForegroundColor Gray
    Write-Host "- Partition: 1" -ForegroundColor Gray
    Write-Host "- Offset: 12345" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "Para verificar os logs em tempo real:" -ForegroundColor Yellow
    Write-Host "kubectl logs -f deployment/log-producer-service -n microservices" -ForegroundColor Gray
    Write-Host "kubectl logs -f deployment/log-consumer-service -n microservices" -ForegroundColor Gray
    Write-Host "kubectl logs -f deployment/log-analytics-service -n microservices" -ForegroundColor Gray
}

# Fun√ß√£o para testar conectividade
function Test-AllServicesConnectivity {
    Write-Phase "üîç TESTE DE CONECTIVIDADE DOS SERVI√áOS"
    
    Write-Host "Testando conectividade com os microservi√ßos..." -ForegroundColor White
    Write-Host ""
    
    # Testar todos os servi√ßos
    $producerActive = Test-ServiceConnectivity -Url $ProducerUrl -ServiceName "Producer Service"
    $consumerActive = Test-ServiceConnectivity -Url $ConsumerUrl -ServiceName "Consumer Service"
    $analyticsActive = Test-ServiceConnectivity -Url $AnalyticsUrl -ServiceName "Analytics Service"
    
    Write-Host ""
    Write-Host "üí° Para executar os servi√ßos localmente:" -ForegroundColor Yellow
    Write-Host "   kubectl port-forward service/log-producer-service 8081:80 -n microservices" -ForegroundColor Gray
    Write-Host "   kubectl port-forward service/log-consumer-service 8082:80 -n microservices" -ForegroundColor Gray
    Write-Host "   kubectl port-forward service/log-analytics-service 8083:80 -n microservices" -ForegroundColor Gray
    
    # Retornar status geral
    $allActive = $producerActive -and $consumerActive -and $analyticsActive
    if ($allActive) {
        Write-Success "Todos os servi√ßos est√£o ativos e prontos para demonstra√ß√£o!"
    }
    else {
        Write-Warning "Alguns servi√ßos n√£o est√£o acess√≠veis. A demonstra√ß√£o ser√° simulada."
    }
    
    return $allActive
}

# Mostrar payload JSON de exemplo
function Show-SampleJson {
    Write-Host "Payload JSON de exemplo para o workflow:" -ForegroundColor Yellow
    Write-Host ""
    
    $sampleData = Get-SamplePayload
    Write-Host $sampleData.Payload -ForegroundColor Cyan
    
    Write-Host ""
    Write-Host "Campos principais:" -ForegroundColor White
    Write-Host "- service: Identifica o microservi√ßo origem" -ForegroundColor Gray
    Write-Host "- level: N√≠vel do log (INFO, WARN, ERROR)" -ForegroundColor Gray
    Write-Host "- message: Mensagem do log" -ForegroundColor Gray
    Write-Host "- requestId: Identificador √∫nico da requisi√ß√£o" -ForegroundColor Gray
    Write-Host "- timestamp: Momento da ocorr√™ncia" -ForegroundColor Gray
    Write-Host "- metadata: Dados adicionais flex√≠veis" -ForegroundColor Gray
}

# Execu√ß√£o principal baseada no par√¢metro Action
switch ($Action) {
    { $_ -in "demo", "run" } {
        Invoke-WorkflowDemo
    }
    { $_ -in "test", "connectivity" } {
        Test-AllServicesConnectivity
    }
    "json" {
        Show-SampleJson
    }
    default {
        Write-Host "Uso: .\demo-workflow.ps1 [-Action demo|test|json]" -ForegroundColor Yellow
        Write-Host "  demo - Executa demonstra√ß√£o completa do workflow (padr√£o)" -ForegroundColor Gray
        Write-Host "  test - Testa conectividade com os servi√ßos" -ForegroundColor Gray
        Write-Host "  json - Mostra o payload JSON de exemplo" -ForegroundColor Gray
        exit 1
    }
}

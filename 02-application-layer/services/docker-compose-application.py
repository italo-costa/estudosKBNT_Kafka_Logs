#!/usr/bin/env python3
"""
Docker Compose - Subir Aplica√ß√£o e Teste de 10.000 Requisi√ß√µes
Utiliza Docker Compose exclusivamente no ambiente Linux virtualizado (WSL)
para subir toda a infraestrutura e microservi√ßos

REQUISITOS:
- WSL Ubuntu instalado e configurado
- Docker instalado e rodando no WSL Ubuntu
- Docker Compose instalado no WSL Ubuntu

Este script for√ßa o uso do WSL para garantir que toda aplica√ß√£o rode
no ambiente Linux containerizado, evitando problemas de compatibilidade.
"""

import os
import sys
import time
import json
import subprocess
import requests
import threading
from datetime import datetime
from pathlib import Path

class DockerComposeManager:
    def __init__(self, workspace_root):
        self.workspace_root = Path(workspace_root)
        self.microservices_path = self.workspace_root / '05-microservices'
        self.compose_file = self.microservices_path / 'docker-compose.yml'
        self.service_health = {}
        self.use_wsl = False
        
    def get_docker_command(self, cmd_list):
        """Retorna comando Docker apropriado (Windows ou WSL)"""
        if self.use_wsl:
            return ['wsl', '-d', 'Ubuntu'] + cmd_list
        else:
            return cmd_list
    
    def get_wsl_path(self, windows_path):
        """Converte caminho Windows para WSL"""
        if self.use_wsl:
            # Converte C:\path\to\file para /mnt/c/path/to/file
            path_str = str(windows_path).replace('\\', '/')
            if path_str.startswith('C:'):
                return path_str.replace('C:', '/mnt/c')
            elif path_str.startswith('c:'):
                return path_str.replace('c:', '/mnt/c')
            return path_str
        return str(windows_path)
    
    def check_docker_availability(self):
        """Verifica se Docker est√° dispon√≠vel no WSL (Linux virtualizado)"""
        print("üêß Verificando Docker no ambiente Linux virtualizado (WSL)...")
        
        try:
            # For√ßa uso do WSL Ubuntu para garantir ambiente Linux
            result = subprocess.run(['wsl', '-d', 'Ubuntu', 'docker', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker WSL dispon√≠vel: {result.stdout.strip()}")
                
                result = subprocess.run(['wsl', '-d', 'Ubuntu', 'docker-compose', '--version'], capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"‚úÖ Docker Compose WSL dispon√≠vel: {result.stdout.strip()}")
                    
                    # Verifica se o daemon Docker est√° rodando
                    result = subprocess.run(['wsl', '-d', 'Ubuntu', 'docker', 'info'], capture_output=True, text=True)
                    if result.returncode == 0:
                        print("‚úÖ Docker daemon est√° rodando no WSL")
                        self.use_wsl = True
                        return True
                    else:
                        print("‚ùå Docker daemon n√£o est√° rodando no WSL")
                        print("Tentando iniciar o Docker daemon...")
                        subprocess.run(['wsl', '-d', 'Ubuntu', 'sudo', 'service', 'docker', 'start'], capture_output=True)
                        time.sleep(3)
                        
                        result = subprocess.run(['wsl', '-d', 'Ubuntu', 'docker', 'info'], capture_output=True, text=True)
                        if result.returncode == 0:
                            print("‚úÖ Docker daemon iniciado com sucesso")
                            self.use_wsl = True
                            return True
                        else:
                            print("‚ùå Falha ao iniciar Docker daemon no WSL")
                            return False
                else:
                    print("‚ùå Docker Compose n√£o encontrado no WSL")
                    return False
            else:
                print("‚ùå Docker n√£o encontrado no WSL")
                print("Por favor, instale o Docker no WSL Ubuntu")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao verificar Docker no WSL: {e}")
            return False
    
    def cleanup_existing_containers(self):
        """Remove containers existentes que possam estar em conflito"""
        print("üßπ Limpando containers existentes no WSL...")
        
        try:
            # For√ßa uso do WSL para todas as opera√ß√µes
            wsl_path = self.get_wsl_path(self.microservices_path)
            
            # Para e remove containers do compose
            print("  ‚Ä¢ Parando containers do docker-compose...")
            cmd_down = ['wsl', '-d', 'Ubuntu', 'bash', '-c', f'cd {wsl_path} && docker-compose down -v --remove-orphans']
            result = subprocess.run(cmd_down, capture_output=True, text=True)
            
            # Remove containers √≥rf√£os
            print("  ‚Ä¢ Removendo containers √≥rf√£os...")
            cmd_prune = ['wsl', '-d', 'Ubuntu', 'docker', 'container', 'prune', '-f']
            subprocess.run(cmd_prune, capture_output=True)
            
            # Remove imagens n√£o utilizadas
            print("  ‚Ä¢ Limpando imagens n√£o utilizadas...")
            cmd_prune_images = ['wsl', '-d', 'Ubuntu', 'docker', 'image', 'prune', '-f']
            subprocess.run(cmd_prune_images, capture_output=True)
            
            # Remove redes √≥rf√£s
            print("  ‚Ä¢ Removendo redes √≥rf√£s...")
            cmd_prune_networks = ['wsl', '-d', 'Ubuntu', 'docker', 'network', 'prune', '-f']
            subprocess.run(cmd_prune_networks, capture_output=True)
            
            print("‚úÖ Limpeza conclu√≠da no WSL")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro na limpeza (ignorando): {e}")
            return False
    
    def build_and_start_services(self):
        """Faz build e inicia todos os servi√ßos no WSL"""
        print("üî® Fazendo build e iniciando servi√ßos com Docker Compose no WSL...")
        
        try:
            # For√ßa uso do WSL para todas as opera√ß√µes
            wsl_path = self.get_wsl_path(self.microservices_path)
            
            # Build das imagens
            print("üì¶ Fazendo build das imagens no WSL...")
            build_cmd = ['wsl', '-d', 'Ubuntu', 'bash', '-c', f'cd {wsl_path} && docker-compose build --no-cache']
            build_process = subprocess.Popen(
                build_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                universal_newlines=True
            )
            
            # Mostra progresso do build
            for line in build_process.stdout:
                print(f"BUILD: {line.strip()}")
            
            build_process.wait()
            
            if build_process.returncode != 0:
                print("‚ùå Erro no build das imagens")
                return False
            
            print("‚úÖ Build das imagens conclu√≠do")
            
            # Inicia os servi√ßos
            print("üöÄ Iniciando servi√ßos no WSL...")
            start_cmd = ['wsl', '-d', 'Ubuntu', 'bash', '-c', f'cd {wsl_path} && docker-compose up -d']
            start_process = subprocess.Popen(
                start_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )
            
            start_output, _ = start_process.communicate()
            print(start_output)
            
            if start_process.returncode == 0:
                print("‚úÖ Servi√ßos iniciados com sucesso no WSL")
                return True
            else:
                print("‚ùå Erro ao iniciar servi√ßos no WSL")
                return False
            
        except Exception as e:
            print(f"‚ùå Erro no build e start dos servi√ßos: {e}")
            return False
    
    def check_services_health(self, timeout=300):
        """Verifica a sa√∫de de todos os servi√ßos"""
        print("üîç Verificando sa√∫de dos servi√ßos...")
        
        # Definir endpoints de sa√∫de para cada servi√ßo
        health_endpoints = {
            'api-gateway': 'http://localhost:8080/actuator/health',
            'log-producer-service': 'http://localhost:8081/actuator/health',
            'log-consumer-service': 'http://localhost:8082/actuator/health',
            'log-analytics-service': 'http://localhost:8083/actuator/health',
            'virtual-stock-service': 'http://localhost:8084/actuator/health',
            'kbnt-stock-consumer-service': 'http://localhost:8085/actuator/health'
        }
        
        start_time = time.time()
        healthy_services = set()
        
        while time.time() - start_time < timeout:
            print(f"\n‚è∞ Verifica√ß√£o de sa√∫de - {int(time.time() - start_time)}s/{timeout}s")
            
            for service_name, health_url in health_endpoints.items():
                if service_name not in healthy_services:
                    try:
                        response = requests.get(health_url, timeout=5)
                        if response.status_code == 200:
                            health_data = response.json()
                            if health_data.get('status') == 'UP':
                                print(f"‚úÖ {service_name} est√° saud√°vel")
                                healthy_services.add(service_name)
                                self.service_health[service_name] = {
                                    'status': 'healthy',
                                    'url': health_url,
                                    'response_time': time.time() - start_time
                                }
                            else:
                                print(f"‚ö†Ô∏è  {service_name} respondendo mas n√£o est√° UP")
                        else:
                            print(f"‚ö†Ô∏è  {service_name} retornou HTTP {response.status_code}")
                    except requests.exceptions.RequestException:
                        print(f"‚è≥ {service_name} ainda n√£o est√° respondendo")
                    except Exception as e:
                        print(f"‚ùå Erro ao verificar {service_name}: {e}")
            
            if len(healthy_services) >= 3:  # API Gateway + pelo menos 2 servi√ßos
                print(f"\n‚úÖ {len(healthy_services)} servi√ßos est√£o saud√°veis. Prosseguindo...")
                break
            
            time.sleep(10)
        
        # Verificar se pelo menos o API Gateway est√° funcionando
        if 'api-gateway' in healthy_services:
            print("‚úÖ API Gateway est√° funcionando - teste pode prosseguir")
            return True
        else:
            print("‚ùå API Gateway n√£o est√° funcionando - n√£o √© poss√≠vel executar teste")
            return False
    
    def get_container_logs(self, service_name):
        """Obt√©m logs de um container espec√≠fico do WSL"""
        try:
            # For√ßa uso do WSL para todas as opera√ß√µes
            wsl_path = self.get_wsl_path(self.microservices_path)
            cmd = ['wsl', '-d', 'Ubuntu', 'bash', '-c', f'cd {wsl_path} && docker-compose logs --tail=50 {service_name}']
            result = subprocess.run(cmd, capture_output=True, text=True)
            return result.stdout
        except Exception as e:
            return f"Erro ao obter logs de {service_name}: {e}"
            return f"Erro ao obter logs: {e}"
        finally:
            if not self.use_wsl:
                os.chdir(self.workspace_root)
    
    def stop_all_services(self):
        """Para todos os servi√ßos no WSL"""
        print("üõë Parando todos os servi√ßos no WSL...")
        
        try:
            # For√ßa uso do WSL para todas as opera√ß√µes
            wsl_path = self.get_wsl_path(self.microservices_path)
            cmd = ['wsl', '-d', 'Ubuntu', 'bash', '-c', f'cd {wsl_path} && docker-compose down']
            subprocess.run(cmd, capture_output=True)
            print("‚úÖ Servi√ßos parados no WSL")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao parar servi√ßos: {e}")

def perform_comprehensive_load_test(base_url, num_requests=10000):
    """Executa teste de carga abrangente com 10.000 requisi√ß√µes"""
    print(f"\nüéØ Iniciando teste de carga com {num_requests} requisi√ß√µes contra {base_url}")
    
    # Endpoints para teste atrav√©s do API Gateway
    test_endpoints = [
        "/actuator/health",
        "/api/v1/virtual-stock/health",
        "/api/v1/virtual-stock/status",
        "/api/v1/logs/health",
        "/api/v1/logs/status"
    ]
    
    results = {
        'total_requests': num_requests,
        'successful_requests': 0,
        'failed_requests': 0,
        'response_times': [],
        'errors': [],
        'status_codes': {},
        'endpoint_results': {endpoint: {'success': 0, 'failed': 0, 'avg_time': 0} for endpoint in test_endpoints}
    }
    
    results_lock = threading.Lock()
    
    def make_request(request_id):
        # Seleciona endpoint
        import random
        endpoint = random.choice(test_endpoints)
        url = f"{base_url}{endpoint}"
        
        try:
            start_time = time.time()
            response = requests.get(url, timeout=15)
            end_time = time.time()
            
            response_time = (end_time - start_time) * 1000  # em ms
            
            with results_lock:
                # Registra c√≥digo de status
                status_code = response.status_code
                if status_code not in results['status_codes']:
                    results['status_codes'][status_code] = 0
                results['status_codes'][status_code] += 1
                
                if response.status_code in [200, 404]:  # 404 pode ser endpoint que n√£o existe
                    results['successful_requests'] += 1
                    results['response_times'].append(response_time)
                    results['endpoint_results'][endpoint]['success'] += 1
                    
                    # Atualiza tempo m√©dio do endpoint
                    current_count = results['endpoint_results'][endpoint]['success']
                    current_avg = results['endpoint_results'][endpoint]['avg_time']
                    new_avg = ((current_avg * (current_count - 1)) + response_time) / current_count
                    results['endpoint_results'][endpoint]['avg_time'] = new_avg
                else:
                    results['failed_requests'] += 1
                    results['endpoint_results'][endpoint]['failed'] += 1
                    results['errors'].append(f"Req {request_id} to {endpoint}: HTTP {response.status_code}")
                    
        except Exception as e:
            with results_lock:
                results['failed_requests'] += 1
                results['endpoint_results'][endpoint]['failed'] += 1
                results['errors'].append(f"Req {request_id} to {endpoint}: {str(e)}")
    
    # Executa requisi√ß√µes em lotes controlados
    batch_size = 25  # Lotes menores para n√£o sobrecarregar
    print("üöÄ Executando requisi√ß√µes em lotes controlados...")
    
    for i in range(0, num_requests, batch_size):
        batch_threads = []
        current_batch_size = min(batch_size, num_requests - i)
        
        # Cria threads para o lote
        for j in range(current_batch_size):
            thread = threading.Thread(target=make_request, args=(i + j,))
            batch_threads.append(thread)
            thread.start()
        
        # Aguarda conclus√£o do lote
        for thread in batch_threads:
            thread.join()
        
        # Progress report
        completed = i + current_batch_size
        progress = (completed / num_requests) * 100
        success_rate = (results['successful_requests'] / completed) * 100 if completed > 0 else 0
        
        print(f"Progress: {completed}/{num_requests} ({progress:.1f}%) - "
              f"Sucessos: {results['successful_requests']} ({success_rate:.1f}%)")
        
        # Pausa entre lotes para n√£o sobrecarregar
        if i + batch_size < num_requests:
            time.sleep(0.5)
    
    # Calcula estat√≠sticas finais
    if results['response_times']:
        sorted_times = sorted(results['response_times'])
        results['statistics'] = {
            'avg_response_time': sum(results['response_times']) / len(results['response_times']),
            'min_response_time': min(results['response_times']),
            'max_response_time': max(results['response_times']),
            'p50_response_time': sorted_times[int(len(sorted_times) * 0.5)],
            'p95_response_time': sorted_times[int(len(sorted_times) * 0.95)],
            'p99_response_time': sorted_times[int(len(sorted_times) * 0.99)]
        }
    
    return results

def main():
    workspace_root = Path.cwd()
    docker_manager = DockerComposeManager(workspace_root)
    
    print("üê≥ DOCKER COMPOSE - Aplica√ß√£o Completa + Teste 10K Requisi√ß√µes")
    print("=" * 70)
    
    try:
        # 1. Verificar Docker
        if not docker_manager.check_docker_availability():
            print("‚ùå Docker n√£o est√° dispon√≠vel. Certifique-se de que o Docker est√° instalado e rodando.")
            return
        
        # 2. Limpeza inicial
        docker_manager.cleanup_existing_containers()
        
        # 3. Build e start dos servi√ßos
        print("\nüèóÔ∏è  Fazendo build e iniciando toda a infraestrutura...")
        if not docker_manager.build_and_start_services():
            print("‚ùå Falha ao iniciar servi√ßos")
            return
        
        # 4. Aguardar estabiliza√ß√£o
        print("\n‚è∞ Aguardando estabiliza√ß√£o inicial...")
        time.sleep(30)
        
        # 5. Verificar sa√∫de dos servi√ßos
        if not docker_manager.check_services_health(timeout=300):
            print("‚ùå Servi√ßos n√£o est√£o saud√°veis")
            
            # Mostrar logs de erro
            print("\nüìã LOGS DOS SERVI√áOS:")
            for service in ['api-gateway', 'virtual-stock-service', 'log-producer-service']:
                print(f"\n--- {service} ---")
                logs = docker_manager.get_container_logs(service)
                print(logs[-1000:])  # √öltimos 1000 caracteres
            
            return
        
        # 6. Executar teste de carga
        base_url = "http://localhost:8080"
        print(f"\nüéØ Iniciando teste de carga contra {base_url}")
        
        test_results = perform_comprehensive_load_test(base_url, 10000)
        
        # 7. Salvar e exibir resultados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"docker_compose_test_10k_results_{timestamp}.json"
        
        # Adiciona informa√ß√µes do ambiente
        test_results['environment_info'] = {
            'test_type': 'docker_compose',
            'base_url': base_url,
            'healthy_services': list(docker_manager.service_health.keys()),
            'service_health': docker_manager.service_health,
            'timestamp': datetime.now().isoformat(),
            'infrastructure': 'Docker Compose with Kafka, PostgreSQL, Redis'
        }
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(test_results, f, indent=2, ensure_ascii=False)
        
        # Exibir resultados
        print("\nüìä RESULTADOS DO TESTE DE CARGA - 10.000 REQUISI√á√ïES")
        print("=" * 70)
        print(f"üê≥ Ambiente: Docker Compose")
        print(f"üåê URL Base: {base_url}")
        print(f"üè• Servi√ßos Saud√°veis: {len(docker_manager.service_health)}")
        print(f"üìä Total de requisi√ß√µes: {test_results['total_requests']}")
        print(f"‚úÖ Requisi√ß√µes bem-sucedidas: {test_results['successful_requests']}")
        print(f"‚ùå Requisi√ß√µes falhadas: {test_results['failed_requests']}")
        
        success_rate = (test_results['successful_requests'] / test_results['total_requests']) * 100
        print(f"üìà Taxa de sucesso: {success_rate:.2f}%")
        
        if 'statistics' in test_results:
            stats = test_results['statistics']
            print(f"\n‚è±Ô∏è  TEMPOS DE RESPOSTA:")
            print(f"   M√©dio: {stats['avg_response_time']:.2f}ms")
            print(f"   M√≠nimo: {stats['min_response_time']:.2f}ms")
            print(f"   M√°ximo: {stats['max_response_time']:.2f}ms")
            print(f"   P50: {stats['p50_response_time']:.2f}ms")
            print(f"   P95: {stats['p95_response_time']:.2f}ms")
            print(f"   P99: {stats['p99_response_time']:.2f}ms")
        
        print(f"\nüìã C√ìDIGOS DE STATUS:")
        for status_code, count in test_results['status_codes'].items():
            percentage = (count / test_results['total_requests']) * 100
            print(f"   HTTP {status_code}: {count} ({percentage:.1f}%)")
        
        print(f"\nüéØ PERFORMANCE POR ENDPOINT:")
        for endpoint, stats in test_results['endpoint_results'].items():
            total = stats['success'] + stats['failed']
            if total > 0:
                success_pct = (stats['success'] / total) * 100
                avg_time = stats['avg_time']
                print(f"   {endpoint}: {stats['success']}/{total} ({success_pct:.1f}% sucesso, {avg_time:.1f}ms m√©dio)")
        
        print(f"\nüìÑ Resultados detalhados salvos em: {results_file}")
        
        # Performance summary
        if success_rate >= 95:
            print("\nüéâ EXCELENTE! Taxa de sucesso >= 95%")
        elif success_rate >= 85:
            print("\nüëç BOM! Taxa de sucesso >= 85%")
        else:
            print("\n‚ö†Ô∏è  ATEN√á√ÉO: Taxa de sucesso baixa. Verificar logs.")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Para todos os servi√ßos
        docker_manager.stop_all_services()
        
        # Salva relat√≥rio final
        final_report = {
            'timestamp': datetime.now().isoformat(),
            'execution_type': 'docker_compose',
            'service_health': docker_manager.service_health,
            'compose_file': str(docker_manager.compose_file)
        }
        
        execution_report_file = f"docker_execution_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(execution_report_file, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ Relat√≥rio de execu√ß√£o salvo em: {execution_report_file}")

if __name__ == "__main__":
    main()

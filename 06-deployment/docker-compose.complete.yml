version: '3.8'

services:
  # =============================================================================
  # BANCO DE DADOS POSTGRESQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: kbnt-postgres
    restart: always
    environment:
      POSTGRES_DB: virtualstock
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d virtualstock"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - kbnt-network

  # =============================================================================
  # ZOOKEEPER PARA KAFKA
  # =============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: kbnt-zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - kbnt-network

  # =============================================================================
  # APACHE KAFKA
  # =============================================================================
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kbnt-kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kbnt-network

  # =============================================================================
  # MICROSERVIÃ‡OS KBNT
  # =============================================================================
  
  # Virtual Stock Service
  virtual-stock-service:
    image: microservices_virtual-stock-service
    container_name: virtual-stock-service
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://kbnt-postgres:5432/virtualstock
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: 'true'
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8084:8080"
      - "9084:9080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kbnt-network

  # Log Producer Service
  log-producer-service:
    image: microservices_log-producer-service
    container_name: log-producer-service
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8080"
      - "9081:9080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - kbnt-network

  # Log Consumer Service
  log-consumer-service:
    image: microservices_log-consumer-service
    container_name: log-consumer-service
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8080"
      - "9082:9080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - kbnt-network

  # Log Analytics Service
  log-analytics-service:
    image: microservices_log-analytics-service
    container_name: log-analytics-service
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8083:8080"
      - "9083:9080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - kbnt-network

  # =============================================================================
  # FERRAMENTAS DE MONITORAMENTO
  # =============================================================================
  
  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kbnt-kafka-ui
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: kbnt-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8090:8080"
    networks:
      - kbnt-network

volumes:
  postgres-data:
  zookeeper-data:
  kafka-data:

networks:
  kbnt-network:
    driver: bridge

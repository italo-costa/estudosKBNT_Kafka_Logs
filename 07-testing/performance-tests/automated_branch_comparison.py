#!/usr/bin/env python3
"""
Automated Branch Comparison Tool
Automatically switches between branches and runs performance tests
"""

import subprocess
import json
import time
import requests
from datetime import datetime
import os

class AutomatedBranchComparison:
    def __init__(self):
        self.results = {
            "master": None,
            "refactoring": None,
            "comparison": None,
            "timestamp": datetime.now().isoformat()
        }
        
    def check_git_status(self):
        """Verifica se o reposit√≥rio est√° limpo"""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True)
            return len(result.stdout.strip()) == 0
        except:
            return False
    
    def get_current_branch(self):
        """Obt√©m branch atual"""
        try:
            result = subprocess.run(['git', 'branch', '--show-current'], 
                                  capture_output=True, text=True)
            return result.stdout.strip()
        except:
            return None
    
    def switch_branch(self, branch_name):
        """Troca para uma branch espec√≠fica"""
        try:
            print(f"üîÑ Trocando para branch: {branch_name}")
            result = subprocess.run(['git', 'checkout', branch_name], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ Trocado para branch: {branch_name}")
                return True
            else:
                print(f"‚ùå Erro ao trocar para branch {branch_name}: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao executar git checkout: {e}")
            return False
    
    def wait_for_services(self, timeout=300):
        """Aguarda servi√ßos ficarem dispon√≠veis"""
        print("‚è≥ Aguardando servi√ßos ficarem dispon√≠veis...")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get("http://localhost:8080/api/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Servi√ßos dispon√≠veis!")
                    return True
            except:
                pass
            
            print("   Aguardando... (servi√ßos ainda n√£o dispon√≠veis)")
            time.sleep(10)
        
        print(f"‚ùå Timeout aguardando servi√ßos ({timeout}s)")
        return False
    
    def restart_services(self):
        """Reinicia os servi√ßos Docker"""
        print("üîÑ Reiniciando servi√ßos...")
        
        try:
            # Parar servi√ßos
            subprocess.run(['docker-compose', 'down'], cwd='05-microservices')
            time.sleep(5)
            
            # Iniciar servi√ßos
            subprocess.run(['docker-compose', 'up', '-d'], cwd='05-microservices')
            
            return self.wait_for_services()
        except Exception as e:
            print(f"‚ùå Erro ao reiniciar servi√ßos: {e}")
            return False
    
    def run_performance_test(self, branch_name):
        """Executa teste de performance para uma branch"""
        print(f"\nüéØ INICIANDO TESTE DE PERFORMANCE - {branch_name.upper()}")
        print("=" * 60)
        
        try:
            # Executar script de teste
            result = subprocess.run([
                'python', 
                '07-testing/performance-tests/branch_performance_tester.py', 
                '1000'
            ], capture_output=True, text=True, timeout=600)
            
            if result.returncode == 0:
                print(f"‚úÖ Teste de {branch_name} conclu√≠do com sucesso")
                print("STDOUT:", result.stdout[-500:])  # √öltimas 500 chars
                
                # Procurar arquivo de resultado mais recente
                test_files = []
                for file in os.listdir('.'):
                    if file.startswith(f'performance_test_{branch_name}_') and file.endswith('.json'):
                        test_files.append(file)
                
                if test_files:
                    latest_file = sorted(test_files)[-1]
                    with open(latest_file, 'r') as f:
                        return json.load(f)
                
            else:
                print(f"‚ùå Erro no teste de {branch_name}")
                print("STDERR:", result.stderr)
                
        except subprocess.TimeoutExpired:
            print(f"‚ùå Timeout no teste de {branch_name}")
        except Exception as e:
            print(f"‚ùå Erro ao executar teste de {branch_name}: {e}")
        
        return None
    
    def compare_results(self):
        """Compara resultados entre branches"""
        if not self.results["master"] or not self.results["refactoring"]:
            print("‚ùå Resultados insuficientes para compara√ß√£o")
            return
        
        print(f"\nüîÑ COMPARA√á√ÉO FINAL ENTRE BRANCHES")
        print("=" * 60)
        
        master = self.results["master"]
        refactoring = self.results["refactoring"]
        
        # Extrair m√©tricas
        master_throughput = master["throughput_test"]["throughput"]
        ref_throughput = refactoring["throughput_test"]["throughput"]
        
        master_latency = master["latency_test"]["avg_latency"]
        ref_latency = refactoring["latency_test"]["avg_latency"]
        
        # Calcular melhorias
        throughput_improvement = ((ref_throughput - master_throughput) / master_throughput) * 100
        latency_improvement = ((master_latency - ref_latency) / master_latency) * 100
        
        comparison = {
            "throughput": {
                "master": master_throughput,
                "refactoring": ref_throughput,
                "improvement_percentage": throughput_improvement,
                "winner": "refactoring" if ref_throughput > master_throughput else "master"
            },
            "latency": {
                "master": master_latency,
                "refactoring": ref_latency,
                "improvement_percentage": latency_improvement,
                "winner": "refactoring" if ref_latency < master_latency else "master"
            }
        }
        
        self.results["comparison"] = comparison
        
        # Imprimir resultados
        print(f"üìä RESULTADOS COMPARATIVOS:")
        print(f"\nüöÄ THROUGHPUT (Requisi√ß√µes/segundo):")
        print(f"   Master: {master_throughput:.2f}")
        print(f"   Refactoring: {ref_throughput:.2f}")
        print(f"   Melhoria: {throughput_improvement:+.2f}%")
        print(f"   üèÜ Vencedor: {comparison['throughput']['winner'].upper()}")
        
        print(f"\n‚è±Ô∏è LAT√äNCIA M√âDIA (millisegundos):")
        print(f"   Master: {master_latency:.2f}")
        print(f"   Refactoring: {ref_latency:.2f}")
        print(f"   Melhoria: {latency_improvement:+.2f}%")
        print(f"   üèÜ Vencedor: {comparison['latency']['winner'].upper()}")
        
        # Vencedor geral
        ref_wins = sum(1 for metric in comparison.values() if metric["winner"] == "refactoring")
        overall_winner = "refactoring" if ref_wins >= 1 else "master"
        
        print(f"\nüèÜ VENCEDOR GERAL: {overall_winner.upper()}")
        
        if overall_winner == "refactoring":
            print("‚úÖ A branch REFACTORING-CLEAN-ARCHITECTURE-V2.1 tem melhor performance!")
        else:
            print("‚úÖ A branch MASTER tem melhor performance!")
        
        return comparison
    
    def save_final_report(self):
        """Salva relat√≥rio final"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"branch_performance_comparison_{timestamp}.json"
        
        with open(filename, 'w') as f:
            json.dump(self.results, f, indent=2)
        
        print(f"\nüìã Relat√≥rio final salvo em: {filename}")
        return filename
    
    def run_full_comparison(self):
        """Executa compara√ß√£o completa entre branches"""
        original_branch = self.get_current_branch()
        print(f"Branch original: {original_branch}")
        
        # Verificar se reposit√≥rio est√° limpo
        if not self.check_git_status():
            print("‚ùå Reposit√≥rio tem mudan√ßas n√£o commitadas. Fa√ßa commit primeiro.")
            return False
        
        try:
            # Testar branch refactoring (atual)
            if original_branch != "refactoring-clean-architecture-v2.1":
                if not self.switch_branch("refactoring-clean-architecture-v2.1"):
                    return False
            
            # Reiniciar servi√ßos para refactoring
            if self.restart_services():
                self.results["refactoring"] = self.run_performance_test("refactoring")
            
            # Testar branch master
            if not self.switch_branch("master"):
                return False
            
            # Reiniciar servi√ßos para master
            if self.restart_services():
                self.results["master"] = self.run_performance_test("master")
            
            # Voltar para branch original
            if original_branch:
                self.switch_branch(original_branch)
            
            # Comparar resultados
            self.compare_results()
            
            # Salvar relat√≥rio
            self.save_final_report()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante compara√ß√£o: {e}")
            # Tentar voltar para branch original
            if original_branch:
                self.switch_branch(original_branch)
            return False

def main():
    print("üéØ COMPARA√á√ÉO AUTOMATIZADA DE PERFORMANCE ENTRE BRANCHES")
    print("=" * 70)
    print("Este script ir√°:")
    print("1. Testar performance da branch refactoring-clean-architecture-v2.1")
    print("2. Testar performance da branch master")
    print("3. Comparar os resultados")
    print("4. Gerar relat√≥rio final")
    
    input("\nPressione Enter para continuar...")
    
    comparator = AutomatedBranchComparison()
    success = comparator.run_full_comparison()
    
    if success:
        print("\n‚úÖ Compara√ß√£o conclu√≠da com sucesso!")
    else:
        print("\n‚ùå Compara√ß√£o falhou. Verifique os logs acima.")

if __name__ == "__main__":
    main()

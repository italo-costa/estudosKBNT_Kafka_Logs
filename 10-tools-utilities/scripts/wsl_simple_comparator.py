#!/usr/bin/env python3
"""
Compara√ß√£o Simplificada de Branches - WSL Linux
Execu√ß√£o direta no ambiente WSL Ubuntu
"""

import os
import subprocess
import json
from datetime import datetime

def run_command(command):
    """Executa comando e retorna resultado"""
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            cwd="/mnt/c/workspace/estudosKBNT_Kafka_Logs"
        )
        
        return {
            "success": result.returncode == 0,
            "stdout": result.stdout,
            "stderr": result.stderr,
            "returncode": result.returncode
        }
    except Exception as e:
        return {
            "success": False,
            "stdout": "",
            "stderr": str(e),
            "returncode": -1
        }

def main():
    print("üêß COMPARA√á√ÉO DE BRANCHES - WSL DIRETO")
    print("=" * 50)
    
    # Verificar ambiente
    print("üîß Verificando ambiente...")
    
    git_version = run_command("git --version")
    if not git_version["success"]:
        print("‚ùå Git n√£o dispon√≠vel")
        return 1
    
    print(f"‚úÖ Git: {git_version['stdout'].strip()}")
    
    # Verificar reposit√≥rio
    print("üìÅ Verificando reposit√≥rio...")
    
    git_status = run_command("git status --porcelain")
    if not git_status["success"]:
        print("‚ùå N√£o √© um reposit√≥rio Git")
        return 1
    
    print("‚úÖ Reposit√≥rio Git v√°lido")
    
    # An√°lise de diferen√ßas
    print("üîç Analisando diferen√ßas entre branches...")
    
    git_diff = run_command("git diff master --name-status")
    if not git_diff["success"]:
        print(f"‚ùå Erro no git diff: {git_diff['stderr']}")
        return 1
    
    changes = git_diff["stdout"].strip().split('\n') if git_diff["stdout"].strip() else []
    
    # Estat√≠sticas
    stats = {
        "total_changes": len(changes),
        "added": 0,
        "modified": 0,
        "deleted": 0,
        "renamed": 0,
        "clean_architecture_files": 0
    }
    
    clean_architecture_layers = [
        "01-presentation-layer",
        "02-application-layer", 
        "03-domain-layer",
        "04-infrastructure-layer",
        "05-microservices",
        "06-deployment",
        "07-testing",
        "08-configuration",
        "09-monitoring",
        "10-tools-utilities"
    ]
    
    for change in changes:
        if not change.strip():
            continue
            
        parts = change.split('\t')
        status = parts[0]
        filename = parts[1] if len(parts) > 1 else ""
        
        if status.startswith('A'):
            stats["added"] += 1
        elif status.startswith('M'):
            stats["modified"] += 1
        elif status.startswith('D'):
            stats["deleted"] += 1
        elif status.startswith('R'):
            stats["renamed"] += 1
        
        # Verificar se est√° em camada Clean Architecture
        for layer in clean_architecture_layers:
            if filename.startswith(layer):
                stats["clean_architecture_files"] += 1
                break
    
    # Verificar estrutura de diret√≥rios
    print("üèóÔ∏è Verificando estrutura Clean Architecture...")
    
    ls_result = run_command("find . -maxdepth 1 -type d -name '*-*' | sort")
    current_layers = []
    
    if ls_result["success"]:
        current_layers = [
            line.strip().replace('./', '') 
            for line in ls_result["stdout"].split('\n') 
            if line.strip() and '-layer' in line
        ]
    
    compliance_score = len(current_layers) / len(clean_architecture_layers) * 100
    
    # Contar arquivos de teste
    print("üß™ Verificando estrutura de testes...")
    
    test_search = run_command("find . -name '*test*' -o -name '*Test*' | head -20")
    test_files = []
    
    if test_search["success"]:
        test_files = [f.strip() for f in test_search["stdout"].split('\n') if f.strip()]
    
    # Contar arquivos Docker
    print("üê≥ Verificando configura√ß√µes Docker...")
    
    docker_search = run_command("find . -name 'docker-compose*.yml' -o -name 'Dockerfile*' | head -20")
    docker_files = []
    
    if docker_search["success"]:
        docker_files = [f.strip() for f in docker_search["stdout"].split('\n') if f.strip()]
    
    # Relat√≥rio
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO DE COMPARA√á√ÉO DE BRANCHES")
    print("=" * 60)
    
    print(f"\nüìà ESTAT√çSTICAS DE MUDAN√áAS:")
    print(f"   ‚Ä¢ Total de mudan√ßas: {stats['total_changes']}")
    print(f"   ‚Ä¢ Arquivos adicionados: {stats['added']}")
    print(f"   ‚Ä¢ Arquivos modificados: {stats['modified']}")
    print(f"   ‚Ä¢ Arquivos deletados: {stats['deleted']}")
    print(f"   ‚Ä¢ Arquivos renomeados: {stats['renamed']}")
    print(f"   ‚Ä¢ Arquivos em camadas Clean: {stats['clean_architecture_files']}")
    
    print(f"\nüèóÔ∏è CLEAN ARCHITECTURE:")
    print(f"   ‚Ä¢ Camadas presentes: {len(current_layers)}/{len(clean_architecture_layers)}")
    print(f"   ‚Ä¢ Score de conformidade: {compliance_score:.1f}%")
    print(f"   ‚Ä¢ Camadas: {', '.join(current_layers[:5])}{'...' if len(current_layers) > 5 else ''}")
    
    print(f"\nüß™ ESTRUTURA DE TESTES:")
    print(f"   ‚Ä¢ Arquivos de teste: {len(test_files)}")
    
    print(f"\nüê≥ CONFIGURA√á√ÉO DOCKER:")
    print(f"   ‚Ä¢ Arquivos Docker: {len(docker_files)}")
    
    # Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES:")
    
    if compliance_score >= 90:
        print("   ‚úÖ Excelente conformidade com Clean Architecture")
    elif compliance_score >= 70:
        print("   üü° Boa estrutura, mas pode ser melhorada")
    else:
        print("   üî¥ Estrutura precisa de melhorias significativas")
    
    if stats["clean_architecture_files"] > 50:
        print("   ‚úÖ Excelente organiza√ß√£o de arquivos em camadas")
    elif stats["clean_architecture_files"] > 20:
        print("   üü° Boa organiza√ß√£o, pode ser expandida")
    else:
        print("   üî¥ Poucos arquivos organizados em camadas")
    
    if len(test_files) > 20:
        print("   ‚úÖ Boa cobertura de testes")
    elif len(test_files) > 5:
        print("   üü° Estrutura de testes b√°sica")
    else:
        print("   üî¥ Estrutura de testes insuficiente")
    
    if len(docker_files) > 10:
        print("   ‚úÖ Excelente configura√ß√£o de containeriza√ß√£o")
    elif len(docker_files) > 5:
        print("   üü° Configura√ß√£o Docker adequada")
    else:
        print("   üî¥ Configura√ß√£o Docker insuficiente")
    
    # Decis√£o final
    print(f"\nüéØ DECIS√ÉO FINAL:")
    
    positive_indicators = 0
    
    if compliance_score >= 90:
        positive_indicators += 1
    if stats["clean_architecture_files"] > 50:
        positive_indicators += 1
    if len(test_files) > 20:
        positive_indicators += 1
    if len(docker_files) > 10:
        positive_indicators += 1
    
    if positive_indicators >= 3:
        print("   üü¢ USAR BRANCH REFACTORING - Estrutura superior implementada")
        print("   üìà Melhorias significativas em arquitetura, organiza√ß√£o e testes")
    elif positive_indicators >= 2:
        print("   üü° USAR BRANCH REFACTORING - Melhorias importantes implementadas")
        print("   üìä Progresso consider√°vel na estrutura√ß√£o do projeto")
    else:
        print("   üî¥ AVALIAR CUIDADOSAMENTE - Melhorias parciais")
        print("   ‚ö†Ô∏è Algumas melhorias presentes, mas n√£o conclusivas")
    
    # Salvar relat√≥rio
    report = {
        "timestamp": datetime.now().isoformat(),
        "environment": "WSL Ubuntu Linux",
        "statistics": stats,
        "clean_architecture": {
            "layers_present": len(current_layers),
            "total_layers": len(clean_architecture_layers),
            "compliance_score": compliance_score,
            "current_layers": current_layers
        },
        "testing": {
            "test_files_count": len(test_files)
        },
        "docker": {
            "docker_files_count": len(docker_files)
        },
        "positive_indicators": positive_indicators,
        "recommendation": "USAR BRANCH REFACTORING" if positive_indicators >= 2 else "AVALIAR CUIDADOSAMENTE"
    }
    
    try:
        with open("/mnt/c/workspace/estudosKBNT_Kafka_Logs/BRANCH_COMPARISON_WSL_SIMPLE.json", 'w') as f:
            json.dump(report, f, indent=2)
        print(f"\nüíæ Relat√≥rio salvo: BRANCH_COMPARISON_WSL_SIMPLE.json")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar relat√≥rio: {e}")
    
    print(f"\nüéâ An√°lise conclu√≠da com sucesso!")
    return 0

if __name__ == "__main__":
    exit(main())
